{"version":3,"sources":["App.module.scss","components/Home/Home.js","components/Experience/Experience.js","components/Projects/Projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","gsap","timeline","defaults","ease","to","width","duration","className","Component","Experience","tl","x","Projects","App","classes","header","href","rel","target","icon","faGithub","faTwitter","faLinkedin","content","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,OAAS,oBAAoB,QAAU,qBAAqB,GAAK,kB,wQCwBpEC,E,kLAnBAC,IAAKC,SAAS,CAAEC,SAAU,CAAEC,KAAM,gBAC1CC,GAAG,sBAAuB,CAAEC,MAAO,QAASC,SAAU,O,+BAIzD,OACE,6BACE,wBAAIC,UAAU,eAAd,QACA,yBAAKA,UAAU,uBACf,wDACA,+J,GAZWC,aC2GJC,G,wLAzGX,IAAMC,EAAKV,IAAKC,SAAS,CAAEC,SAAU,CAAEC,KAAM,gBAC7CO,EAAGN,GAAG,CAAC,qBAAsB,qBAAsB,CAAEO,EAAG,KAAML,SAAU,KACxEI,EAAGN,GAAG,4BAA6B,CAAEC,MAAO,QAASC,SAAU,IAAM,K,+BAKrE,OACE,yBAAKC,UAAU,gCACb,wBAAIA,UAAU,qBAAd,cACA,yBAAKA,UAAU,6BACf,yBAAKA,UAAU,2CACb,yBAAKA,UAAU,sCACb,yBAAKA,UAAU,uBACb,oDACA,6BAFF,+BAOJ,yBAAKA,UAAU,2CACb,yBAAKA,UAAU,qCACb,yBAAKA,UAAU,uBACb,uDACA,6BAFF,+CAIE,6BACA,6BALF,uGAQE,6BARF,0EAWE,6BAXF,mEAaE,6BAbF,oEAeE,6BAfF,yGAkBE,wBAAIA,UAAU,oBACZ,0FAGA,wEACA,kHAQR,yBAAKA,UAAU,2CACb,yBAAKA,UAAU,sCACb,yBAAKA,UAAU,uBACb,sDACA,6BAFF,sCAIE,6BACA,6BALF,qEAOE,wBAAIA,UAAU,oBACZ,oEACA,iDACA,uDAKR,yBAAKA,UAAU,2CACb,yBAAKA,UAAU,sCACb,yBAAKA,UAAU,uBACb,uCACA,6BAFF,0CAOJ,yBAAKA,UAAU,2CACb,yBAAKA,UAAU,qCACb,yBAAKA,UAAU,uBACb,uBAAGA,UAAU,sBAAb,6BACA,6BAFF,mCAIE,6BACA,6BALF,8EAQE,6BARF,mDAUE,6BAVF,+BAYE,wBAAIA,UAAU,oBACZ,qDACA,6E,GAjGSC,cCiBVI,G,wLAfAZ,IAAKC,SAAS,CAAEC,SAAU,CAAEC,KAAM,gBAC1CC,GAAG,0BAA2B,CAAEC,MAAO,QAASC,SAAU,O,+BAI7D,OACE,6BACE,wBAAIC,UAAU,mBAAd,YACA,yBAAKA,UAAU,2BACf,kD,GAXeC,c,+BCyDRK,MAhDf,WACE,OACE,kBAAC,IAAD,KACE,4BAAQN,UAAWO,IAAQC,QACzB,6BACE,uBACEC,KAAK,2BACLC,IAAI,sBACJC,OAAO,UAEP,kBAAC,IAAD,CAAiBC,KAAMC,OAEzB,uBACEJ,KAAK,6BACLC,IAAI,sBACJC,OAAO,UAEP,kBAAC,IAAD,CAAiBC,KAAME,OAEzB,uBACEL,KAAK,oCACLC,IAAI,sBACJC,OAAO,UAEP,kBAAC,IAAD,CAAiBC,KAAMG,QAG3B,6BACE,kBAAC,IAAD,CAAMf,UAAU,WAAWH,GAAG,KAA9B,QAGA,kBAAC,IAAD,CAAMG,UAAU,WAAWH,GAAG,eAA9B,cAGA,kBAAC,IAAD,CAAMG,UAAU,WAAWH,GAAG,aAA9B,cAKJ,yBAAKG,UAAWO,IAAQS,SACtB,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW3B,IACjC,kBAAC,IAAD,CAAOyB,KAAK,cAAcC,OAAK,EAACC,UAAWjB,IAC3C,kBAAC,IAAD,CAAOe,KAAK,YAAYC,OAAK,EAACC,UAAWd,OC3C7Be,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6d149502.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__39SNO\",\"content\":\"App_content__2wX37\",\"fa\":\"App_fa__2J_VJ\"};","import React, { Component } from \"react\";\r\nimport \"./Home.scss\";\r\nimport { gsap } from \"gsap\";\r\n\r\nclass Home extends Component {\r\n  componentDidMount() {\r\n    const tl = gsap.timeline({ defaults: { ease: \"power1.out\" } });\r\n    tl.to(\".home__title-border\", { width: \"215px\", duration: .5 });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"home__title\">home</h1>\r\n        <div className=\"home__title-border\"></div>\r\n        <h3>full stack web developer</h3>\r\n        <p>\r\n          Hi, I'm Joshua Hua. I'm a software engineer with experience in full\r\n          stack, but I like to experiment and work on new things!\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport \"./Experience.scss\";\r\nimport { gsap } from \"gsap\";\r\n\r\nclass Experience extends Component {\r\n  componentDidMount() {\r\n    const tl = gsap.timeline({ defaults: { ease: \"power1.out\" } });\r\n    tl.to([\".experience__right\", \".experience__left\"], { x: \"0%\", duration: .5 });\r\n    tl.to(\".experience__title-border\", { width: \"215px\", duration: .5 }, 0);\r\n  }\r\n\r\n  // Using BEM instead of module because gsap has to be able to target the classes\r\n  render() {\r\n    return (\r\n      <div className=\"experience__timeline-content\">\r\n        <h1 className=\"experience__title\">experience</h1>\r\n        <div className=\"experience__title-border\"></div>\r\n        <div className=\"experience__timeline experience__color1\">\r\n          <div className=\"experience__item experience__right\">\r\n            <div className=\"experience__content\">\r\n              <b>August 2020 - Present</b>\r\n              <br />\r\n              Front End Engineer, CREXi\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"experience__timeline experience__color1\">\r\n          <div className=\"experience__item experience__left\">\r\n            <div className=\"experience__content\">\r\n              <b>October 2018 - June 2020</b>\r\n              <br />\r\n              Senior Software Developer, American Airlines\r\n              <br />\r\n              <br />\r\n              Built two full stack applications used by frontline workers to\r\n              order parts for aircraft maintenance.\r\n              <br />\r\n              Developed .NET Core WebAPI and Node.js backends, and Angular\r\n              frontends.\r\n              <br />\r\n              Integrated with other backend services and SQL/Oracle databases.\r\n              <br />\r\n              Setup CI/CD pipeline, monitor application health using Dynatrace.\r\n              <br />\r\n              Work with other teams to facilitate development/testing and debug\r\n              issues with data and infrastructure.\r\n              <ul className=\"experience__list\">\r\n                <li>\r\n                  Languages: C#, TypeScript, JavaScript, HTML, Less, GraphQL\r\n                </li>\r\n                <li>Libraries: Kendo UI for Angular, nrwl/nx</li>\r\n                <li>\r\n                  Frameworks: .NET Core, Angular 7, EF Core, Node.js, xUnit,\r\n                  Jasmine, Protractor\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"experience__timeline experience__color1\">\r\n          <div className=\"experience__item experience__right\">\r\n            <div className=\"experience__content\">\r\n              <b>May 2018 - October 2018</b>\r\n              <br />\r\n              Software Developer, Global Payments\r\n              <br />\r\n              <br />\r\n              Added new features and debugged issues in ASP.NET web application.\r\n              <ul className=\"experience__list\">\r\n                <li>Languages: C#, HTML, CSS, JavaScript</li>\r\n                <li>Libraries: jQuery</li>\r\n                <li>Frameworks: ASP.NET</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"experience__timeline experience__color1\">\r\n          <div className=\"experience__item experience__right\">\r\n            <div className=\"experience__content\">\r\n              <b>May 2018</b>\r\n              <br />\r\n              Graduated ASU, B.S. Computer Science\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"experience__timeline experience__color1\">\r\n          <div className=\"experience__item experience__left\">\r\n            <div className=\"experience__content\">\r\n              <b className=\"experience__color1\">September 2016 - May 2018</b>\r\n              <br />\r\n              Software Engineer, Alpha Connect\r\n              <br />\r\n              <br />\r\n              Added new features to .NET desktop application, and built new\r\n              applications.\r\n              <br />\r\n              Installed and integrated SQL server for storage.\r\n              <br />\r\n              Mentored a junior developer.\r\n              <ul className=\"experience__list\">\r\n                <li>Languages: C#, VB.NET</li>\r\n                <li>Frameworks: .NET Framework, WinForms</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Experience;\r\n","import React, { Component } from \"react\";\r\nimport \"./Projects.scss\";\r\nimport { gsap } from \"gsap\";\r\n\r\nclass Projects extends Component {\r\n  componentDidMount() {\r\n    const tl = gsap.timeline({ defaults: { ease: \"power1.out\" } });\r\n    tl.to(\".projects__title-border\", { width: \"215px\", duration: .5 });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"projects__title\">projects</h1>\r\n        <div className=\"projects__title-border\"></div>\r\n        <p>Coming soon...</p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Projects;\r\n","import React from \"react\";\r\nimport classes from \"./App.module.scss\";\r\nimport Home from \"./components/Home/Home\";\r\nimport Experience from \"./components/Experience/Experience\";\r\nimport Projects from \"./components/Projects/Projects\";\r\nimport { HashRouter, Link, Route } from \"react-router-dom\";\r\nimport {\r\n  faGithub,\r\n  faTwitter,\r\n  faLinkedin,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <header className={classes.header}>\r\n        <div>\r\n          <a\r\n            href=\"https://github.com/jhua4\"\r\n            rel=\"noopener noreferrer\"\r\n            target=\"_blank\"\r\n          >\r\n            <FontAwesomeIcon icon={faGithub} />\r\n          </a>\r\n          <a\r\n            href=\"https://twitter.com/_jhua4\"\r\n            rel=\"noopener noreferrer\"\r\n            target=\"_blank\"\r\n          >\r\n            <FontAwesomeIcon icon={faTwitter} />\r\n          </a>\r\n          <a\r\n            href=\"https://www.linkedin.com/in/jhua4\"\r\n            rel=\"noopener noreferrer\"\r\n            target=\"_blank\"\r\n          >\r\n            <FontAwesomeIcon icon={faLinkedin} />\r\n          </a>\r\n        </div>\r\n        <div>\r\n          <Link className=\"nav-link\" to=\"/\">\r\n            Home\r\n          </Link>\r\n          <Link className=\"nav-link\" to=\"/experience\">\r\n            Experience\r\n          </Link>\r\n          <Link className=\"nav-link\" to=\"/projects\">\r\n            Projects\r\n          </Link>\r\n        </div>\r\n      </header>\r\n      <div className={classes.content}>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/experience\" exact component={Experience} />\r\n        <Route path=\"/projects\" exact component={Projects} />\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}