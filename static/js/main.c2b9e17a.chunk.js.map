{"version":3,"sources":["App.module.scss","components/Home/Home.js","components/Experience/Experience.js","components/Projects/Projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","gsap","timeline","defaults","ease","to","width","duration","className","Component","Experience","tl","x","Projects","App","classes","header","href","rel","target","icon","faGithub","faTwitter","faLinkedin","content","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c2b9e17a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__2L3DO\",\"content\":\"App_content__1Wt3K\",\"fa\":\"App_fa__3fODY\"};","import React, { Component } from \"react\";\nimport \"./Home.scss\";\nimport { gsap } from \"gsap\";\n\nclass Home extends Component {\n  componentDidMount() {\n    const tl = gsap.timeline({ defaults: { ease: \"power1.out\" } });\n    tl.to(\".home__title-border\", { width: \"215px\", duration: .25 });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"home__title\">home</h1>\n        <div className=\"home__title-border\"></div>\n        <h3>full stack web developer</h3>\n        <p>\n          Hi, I'm Joshua Hua. I'm a software engineer with experience in full\n          stack, but I like to experiment and work on new things!\n        </p>\n      </div>\n    );\n  }\n};\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport \"./Experience.scss\";\nimport { gsap } from \"gsap\";\n\nclass Experience extends Component {\n  componentDidMount() {\n    const tl = gsap.timeline({ defaults: { ease: \"power1.out\" } });\n    tl.to([\".experience__right\", \".experience__left\"], { x: \"0%\", duration: .25 });\n    tl.to(\".experience__title-border\", { width: \"215px\", duration: .25 }, 0);\n  }\n\n  // Using BEM instead of module because gsap has to be able to target the classes\n  render() {\n    return (\n      <div className=\"experience__timeline-content\">\n        <h1 className=\"experience__title\">experience</h1>\n        <div className=\"experience__title-border\"></div>\n        <div className=\"experience__timeline experience__color1\">\n          <div className=\"experience__item experience__right\">\n            <div className=\"experience__content\">\n              <b>August 2020 - Present</b>\n              <br />\n              Front End Engineer, CREXi\n              <br />\n              <br />\n              Create insights tab to show relevant sale statistics using ngx-charts over the selected geographical area.\n              <br />\n              Allow users to share insights searches based on radius tool or location selected.\n              <br />\n              Add ability for users to create groups for sold properties and share them.\n              <br />\n              Reduce main bundle size by removing barrel files from compiled modules.\n              <ul className=\"experience__list\">\n                <li>Languages: TypeScript, Pug, Less</li>\n                <li>Libraries: Nrwl, NgRx, RxJS</li>\n                <li>Frameworks: Angular 12</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        <div className=\"experience__timeline experience__color1\">\n          <div className=\"experience__item experience__left\">\n            <div className=\"experience__content\">\n              <b>October 2018 - June 2020</b>\n              <br />\n              Senior Software Developer, American Airlines\n              <br />\n              <br />\n              Built two full stack applications used by frontline workers to\n              order parts for aircraft maintenance.\n              <br />\n              Developed .NET Core WebAPI and Node.js backends, and Angular\n              frontends.\n              <br />\n              Integrated with other backend services and SQL/Oracle databases.\n              <br />\n              Setup CI/CD pipeline, monitor application health using Dynatrace.\n              <br />\n              Work with other teams to facilitate development/testing and debug\n              issues with data and infrastructure.\n              <ul className=\"experience__list\">\n                <li>\n                  Languages: C#, TypeScript, JavaScript, HTML, Less, GraphQL\n                </li>\n                <li>Libraries: Kendo UI for Angular, nrwl/nx</li>\n                <li>\n                  Frameworks: .NET Core, Angular 7, EF Core, Node.js, xUnit,\n                  Jasmine, Protractor\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        <div className=\"experience__timeline experience__color1\">\n          <div className=\"experience__item experience__right\">\n            <div className=\"experience__content\">\n              <b>May 2018 - October 2018</b>\n              <br />\n              Software Developer, Global Payments\n              <br />\n              <br />\n              Added new features and debugged issues in ASP.NET web application.\n              <ul className=\"experience__list\">\n                <li>Languages: C#, HTML, CSS, JavaScript</li>\n                <li>Libraries: jQuery</li>\n                <li>Frameworks: ASP.NET</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        <div className=\"experience__timeline experience__color1\">\n          <div className=\"experience__item experience__right\">\n            <div className=\"experience__content\">\n              <b>May 2018</b>\n              <br />\n              Graduated ASU, B.S. Computer Science\n            </div>\n          </div>\n        </div>\n        <div className=\"experience__timeline experience__color1\">\n          <div className=\"experience__item experience__left\">\n            <div className=\"experience__content\">\n              <b className=\"experience__color1\">September 2016 - May 2018</b>\n              <br />\n              Software Engineer, Alpha Connect\n              <br />\n              <br />\n              Added new features to .NET desktop application, and built new\n              applications.\n              <br />\n              Installed and integrated SQL server for storage.\n              <br />\n              Mentored a junior developer.\n              <ul className=\"experience__list\">\n                <li>Languages: C#, VB.NET</li>\n                <li>Frameworks: .NET Framework, WinForms</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Experience;\n","import React, { Component } from \"react\";\nimport \"./Projects.scss\";\nimport { gsap } from \"gsap\";\n\nclass Projects extends Component {\n  componentDidMount() {\n    const tl = gsap.timeline({ defaults: { ease: \"power1.out\" } });\n    tl.to(\".projects__title-border\", { width: \"215px\", duration: .25 });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"projects__title\">projects</h1>\n        <div className=\"projects__title-border\"></div>\n        <p>Coming soon...</p>\n      </div>\n    );\n  }\n};\n\nexport default Projects;\n","import React from \"react\";\nimport classes from \"./App.module.scss\";\nimport Home from \"./components/Home/Home\";\nimport Experience from \"./components/Experience/Experience\";\nimport Projects from \"./components/Projects/Projects\";\nimport { HashRouter, Link, Route } from \"react-router-dom\";\nimport {\n  faGithub,\n  faTwitter,\n  faLinkedin,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <header className={classes.header}>\n        <div>\n          <a\n            href=\"https://github.com/jhua4\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            <FontAwesomeIcon icon={faGithub} />\n          </a>\n          <a\n            href=\"https://twitter.com/_jhua4\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            <FontAwesomeIcon icon={faTwitter} />\n          </a>\n          <a\n            href=\"https://www.linkedin.com/in/jhua4\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            <FontAwesomeIcon icon={faLinkedin} />\n          </a>\n        </div>\n        <div>\n          <Link className=\"nav-link\" to=\"/\">\n            Home\n          </Link>\n          <Link className=\"nav-link\" to=\"/experience\">\n            Experience\n          </Link>\n          <Link className=\"nav-link\" to=\"/projects\">\n            Projects\n          </Link>\n        </div>\n      </header>\n      <div className={classes.content}>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/experience\" exact component={Experience} />\n        <Route path=\"/projects\" exact component={Projects} />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}